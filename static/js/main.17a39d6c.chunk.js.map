{"version":3,"sources":["components/MovieCard/index.js","components/SearchMovies/index.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","movie","className","src","poster_path","alt","title","release_date","Date","getFullYear","vote_average","Math","round","popularity","overview","substring","href","target","rel","SearchMovie","useState","query","setQuery","movies","setMovies","getMovies","e","a","preventDefault","url","fetch","res","json","data","results","console","error","onSubmit","htmlFor","type","name","placeholder","value","onChange","map","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAgDeA,EA9CG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKA,UAAU,YAAf,SACE,qBACEC,IAAG,0DAAqDF,EAAMG,aAC9DC,IAAKJ,EAAMK,MAAQ,oBAGvB,sBAAKJ,UAAU,aAAf,UACE,6BAAKD,EAAMK,QACX,sBAAKJ,UAAU,sBAAf,UACE,+BACE,6BACGD,EAAMM,aACH,IAAIC,KAAKP,EAAMM,cAAcE,cAC7B,KAEN,0CAAaR,EAAMS,aAAeT,EAAMS,aAAe,eACvD,oDAAuBC,KAAKC,MAAMX,EAAMY,YAAc,UAExD,sBAAKX,UAAU,qBAAf,UACE,4BAAID,EAAMa,SAASC,UAAU,EAAG,KAAO,QACvC,mBACEC,KAAK,mEACLC,OAAO,SACPC,IAAI,aAHN,0BAQF,qBAAKhB,UAAU,qBAAf,SACE,mBACEc,KAAK,8CACLC,OAAO,SACPC,IAAI,aAHN,uCCYGC,EA3CK,WAAO,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,OAEIF,mBAAS,IAFb,mBAEjBG,EAFiB,KAETC,EAFS,KAIlBC,EAAS,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAChBD,EAAEE,iBAEIC,EAHU,kHAGuGR,EAHvG,iDAOIS,MAAMD,GAPV,cAORE,EAPQ,gBAQKA,EAAIC,OART,OAQRC,EARQ,OASdT,EAAUS,EAAKC,SATD,kDAWdC,QAAQC,MAAR,MAXc,0DAAH,sDAef,OACE,qCACE,uBAAMlC,UAAU,OAAOmC,SAAUZ,EAAjC,UACE,uBAAOa,QAAQ,QAAQpC,UAAU,QAAjC,wBAGA,uBACEA,UAAU,QACVqC,KAAK,OACLC,KAAK,QACLC,YAAY,qBACZC,MAAOrB,EACPsB,SAAU,SAACjB,GAAD,OAAOJ,EAASI,EAAET,OAAOyB,UAErC,wBAAQxC,UAAU,SAASqC,KAAK,SAAhC,uBAKDhB,EAAOqB,KAAI,SAAC3C,GAAD,OAAW,cAAC,EAAD,CAAWA,MAAOA,GAAYA,EAAM4C,WC7BlDC,EAPH,kBACV,sBAAK5C,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,gCACA,cAAC,EAAD,QCIW6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.17a39d6c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst MovieCard = ({ movie }) => {\n  return (\n    <div className=\"card\">\n      <div className=\"card_left\">\n        <img\n          src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\n          alt={movie.title + \" movie poster\"}\n        />\n      </div>\n      <div className=\"card_right\">\n        <h1>{movie.title}</h1>\n        <div className=\"card_right__details\">\n          <ul>\n            <li>\n              {movie.release_date\n                ? new Date(movie.release_date).getFullYear()\n                : \"\"}\n            </li>\n            <li>Rating: {movie.vote_average ? movie.vote_average : 'No Rating'}</li>\n            <li>Popularity Score: {Math.round(movie.popularity) + '%'}</li>\n          </ul>\n          <div className=\"card_right__review\">\n            <p>{movie.overview.substring(0, 200) + \"...\"}</p>\n            <a\n              href=\"https://www.imdb.com/title/tt0266697/plotsummary?ref_=tt_stry_pl\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Read more\n            </a>\n          </div>\n          <div className=\"card_right__button\">\n            <a\n              href=\"https://www.youtube.com/watch?v=ot6C1ZKyiME\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              WATCH TRAILER\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MovieCard;\n","import React, { useState } from \"react\";\nimport MovieCard from \"../MovieCard\";\n\nconst SearchMovie = () => {\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n\n  const getMovies = async (e) => {\n    e.preventDefault();\n\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=86cad986d0f8dab2d07c7fce77767edf&language=en-US&query=${query}&page=1&include_adult=false`;\n\n    try {\n      // await is used because a promise is returned\n      const res = await fetch(url);\n      const data = await res.json();\n      setMovies(data.results);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <form className=\"form\" onSubmit={getMovies}>\n        <label htmlFor=\"query\" className=\"label\">\n          Movie Name\n        </label>\n        <input\n          className=\"input\"\n          type=\"text\"\n          name=\"query\"\n          placeholder=\"Enter a movie name\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        />\n        <button className=\"button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n\n      {movies.map((movie) => <MovieCard movie={movie} key={movie.id} />)}\n    </>\n  );\n};\n\nexport default SearchMovie;\n","import './App.css';\n\nimport React from 'react';\nimport SearchMovie from './components/SearchMovies';\n\nconst App = () => (\n  <div className=\"container\">\n    <h1 className=\"title\">React Movie Search</h1>\n    <SearchMovie />\n  </div>\n)\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}